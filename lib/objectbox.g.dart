// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/auth/data/models/box_user.dart';
import 'src/secrets/data/models/index.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 1439785766373091740),
      name: 'BoxUser',
      lastPropertyId: const obx_int.IdUid(10, 2707296547118688812),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5814409548211187442),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2881649992247817566),
            name: 'uuId',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(2, 3950006460369425872)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5471732945144939490),
            name: 'username',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(3, 4156896939401104175)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2274027840110581478),
            name: 'salt',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2707296547118688812),
            name: 'passwordHash',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 1924211853924683680),
      name: 'BoxSecretsCategory',
      lastPropertyId: const obx_int.IdUid(4, 6411156345032939162),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2326084050025934123),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1530461658101074757),
            name: 'categoryId',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(8, 8026342280243699303)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7579537261763070907),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6411156345032939162),
            name: 'userId',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 3967998834296108358),
      name: 'BoxSecretsEntry',
      lastPropertyId: const obx_int.IdUid(8, 2597119138542288584),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8330156408600349182),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8702559111745727439),
            name: 'secretsEntryId',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(9, 1860773659152041467)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3736114449616953300),
            name: 'userId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6668832959887969617),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3955626993031196895),
            name: 'categoryIds',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2597119138542288584),
            name: 'secretIds',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(11, 4856237438968097379),
      name: 'BoxSecret',
      lastPropertyId: const obx_int.IdUid(6, 6462966750951263211),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2115724313747831551),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 607301051601189962),
            name: 'secretId',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(12, 2941665141008696997)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8227432600825242365),
            name: 'userId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1062366408935811717),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2162981054534404651),
            name: 'dbSecretType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6462966750951263211),
            name: 'dbSecretData',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(11, 4856237438968097379),
      lastIndexId: const obx_int.IdUid(12, 2941665141008696997),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [
        2923212417817396818,
        7399021269790462562,
        2534067113374659677,
        5461566537505069556,
        8756569850340011702,
        8711875957961349232,
        7563782811538484709
      ],
      retiredIndexUids: const [4102753725350560477],
      retiredPropertyUids: const [
        5948484875982684821,
        3944251529676479604,
        3418572925750825685,
        8137386634090373013,
        1697329569428169711,
        1373474220678182030,
        1676210383692528281,
        784840885189612474,
        5540719855793243521,
        3782482154061880269,
        3059730045502568295,
        7525300731354223206,
        1332021250267211561,
        368482423228325303,
        3050821429644254413,
        5112420395785015964,
        7450212579369347008,
        810982279032385613,
        1871900919373686129,
        8004044078197418512,
        6085075747357750578,
        5715458660984123933,
        3046935334589828619,
        6293057660307318842,
        4226390987843584979,
        8160816985960886692,
        5425379627440064622,
        5039119046165175681,
        777668611484036789,
        6994739299221393064,
        2755442305963400299,
        6492190815521305838,
        4351037987709832098,
        2814000483297060227,
        4711492884591726590,
        6033454902112758232,
        6755897924701200064,
        1551662866995906537,
        1661167845117644796,
        764821668104937004,
        8769088842305190708,
        5774823853021560602
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    BoxUser: obx_int.EntityDefinition<BoxUser>(
        model: _entities[0],
        toOneRelations: (BoxUser object) => [],
        toManyRelations: (BoxUser object) => {},
        getId: (BoxUser object) => object.id,
        setId: (BoxUser object, int id) {
          object.id = id;
        },
        objectToFB: (BoxUser object, fb.Builder fbb) {
          final uuIdOffset = fbb.writeString(object.uuId);
          final usernameOffset = fbb.writeString(object.username);
          final saltOffset = fbb.writeString(object.salt);
          final passwordHashOffset = fbb.writeString(object.passwordHash);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(5, uuIdOffset);
          fbb.addOffset(6, usernameOffset);
          fbb.addOffset(8, saltOffset);
          fbb.addOffset(9, passwordHashOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final uuIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final usernameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final passwordHashParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final saltParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final object = BoxUser(
              id: idParam,
              uuId: uuIdParam,
              username: usernameParam,
              passwordHash: passwordHashParam,
              salt: saltParam);

          return object;
        }),
    BoxSecretsCategory: obx_int.EntityDefinition<BoxSecretsCategory>(
        model: _entities[1],
        toOneRelations: (BoxSecretsCategory object) => [],
        toManyRelations: (BoxSecretsCategory object) => {},
        getId: (BoxSecretsCategory object) => object.id,
        setId: (BoxSecretsCategory object, int id) {
          object.id = id;
        },
        objectToFB: (BoxSecretsCategory object, fb.Builder fbb) {
          final categoryIdOffset = fbb.writeString(object.categoryId);
          final nameOffset = fbb.writeString(object.name);
          final userIdOffset = fbb.writeString(object.userId);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, categoryIdOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, userIdOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final categoryIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final userIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = BoxSecretsCategory(
              id: idParam,
              categoryId: categoryIdParam,
              userId: userIdParam,
              name: nameParam);

          return object;
        }),
    BoxSecretsEntry: obx_int.EntityDefinition<BoxSecretsEntry>(
        model: _entities[2],
        toOneRelations: (BoxSecretsEntry object) => [],
        toManyRelations: (BoxSecretsEntry object) => {},
        getId: (BoxSecretsEntry object) => object.id,
        setId: (BoxSecretsEntry object, int id) {
          object.id = id;
        },
        objectToFB: (BoxSecretsEntry object, fb.Builder fbb) {
          final secretsEntryIdOffset = fbb.writeString(object.secretsEntryId);
          final userIdOffset = fbb.writeString(object.userId);
          final titleOffset = fbb.writeString(object.title);
          final categoryIdsOffset = fbb.writeList(
              object.categoryIds.map(fbb.writeString).toList(growable: false));
          final secretIdsOffset = fbb.writeList(
              object.secretIds.map(fbb.writeString).toList(growable: false));
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, secretsEntryIdOffset);
          fbb.addOffset(2, userIdOffset);
          fbb.addOffset(3, titleOffset);
          fbb.addOffset(6, categoryIdsOffset);
          fbb.addOffset(7, secretIdsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final secretsEntryIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final userIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final categoryIdsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 16, []);
          final secretIdsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 18, []);
          final object = BoxSecretsEntry(
              id: idParam,
              secretsEntryId: secretsEntryIdParam,
              userId: userIdParam,
              title: titleParam,
              categoryIds: categoryIdsParam,
              secretIds: secretIdsParam);

          return object;
        }),
    BoxSecret: obx_int.EntityDefinition<BoxSecret>(
        model: _entities[3],
        toOneRelations: (BoxSecret object) => [],
        toManyRelations: (BoxSecret object) => {},
        getId: (BoxSecret object) => object.id,
        setId: (BoxSecret object, int id) {
          object.id = id;
        },
        objectToFB: (BoxSecret object, fb.Builder fbb) {
          final secretIdOffset = fbb.writeString(object.secretId);
          final userIdOffset = fbb.writeString(object.userId);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final dbSecretTypeOffset = object.dbSecretType == null
              ? null
              : fbb.writeString(object.dbSecretType!);
          final dbSecretDataOffset = object.dbSecretData == null
              ? null
              : fbb.writeString(object.dbSecretData!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, secretIdOffset);
          fbb.addOffset(2, userIdOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, dbSecretTypeOffset);
          fbb.addOffset(5, dbSecretDataOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final secretIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final userIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final object = BoxSecret(
              id: idParam,
              secretId: secretIdParam,
              userId: userIdParam,
              name: nameParam)
            ..dbSecretType = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..dbSecretData = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [BoxUser] entity fields to define ObjectBox queries.
class BoxUser_ {
  /// see [BoxUser.id]
  static final id =
      obx.QueryIntegerProperty<BoxUser>(_entities[0].properties[0]);

  /// see [BoxUser.uuId]
  static final uuId =
      obx.QueryStringProperty<BoxUser>(_entities[0].properties[1]);

  /// see [BoxUser.username]
  static final username =
      obx.QueryStringProperty<BoxUser>(_entities[0].properties[2]);

  /// see [BoxUser.salt]
  static final salt =
      obx.QueryStringProperty<BoxUser>(_entities[0].properties[3]);

  /// see [BoxUser.passwordHash]
  static final passwordHash =
      obx.QueryStringProperty<BoxUser>(_entities[0].properties[4]);
}

/// [BoxSecretsCategory] entity fields to define ObjectBox queries.
class BoxSecretsCategory_ {
  /// see [BoxSecretsCategory.id]
  static final id =
      obx.QueryIntegerProperty<BoxSecretsCategory>(_entities[1].properties[0]);

  /// see [BoxSecretsCategory.categoryId]
  static final categoryId =
      obx.QueryStringProperty<BoxSecretsCategory>(_entities[1].properties[1]);

  /// see [BoxSecretsCategory.name]
  static final name =
      obx.QueryStringProperty<BoxSecretsCategory>(_entities[1].properties[2]);

  /// see [BoxSecretsCategory.userId]
  static final userId =
      obx.QueryStringProperty<BoxSecretsCategory>(_entities[1].properties[3]);
}

/// [BoxSecretsEntry] entity fields to define ObjectBox queries.
class BoxSecretsEntry_ {
  /// see [BoxSecretsEntry.id]
  static final id =
      obx.QueryIntegerProperty<BoxSecretsEntry>(_entities[2].properties[0]);

  /// see [BoxSecretsEntry.secretsEntryId]
  static final secretsEntryId =
      obx.QueryStringProperty<BoxSecretsEntry>(_entities[2].properties[1]);

  /// see [BoxSecretsEntry.userId]
  static final userId =
      obx.QueryStringProperty<BoxSecretsEntry>(_entities[2].properties[2]);

  /// see [BoxSecretsEntry.title]
  static final title =
      obx.QueryStringProperty<BoxSecretsEntry>(_entities[2].properties[3]);

  /// see [BoxSecretsEntry.categoryIds]
  static final categoryIds = obx.QueryStringVectorProperty<BoxSecretsEntry>(
      _entities[2].properties[4]);

  /// see [BoxSecretsEntry.secretIds]
  static final secretIds = obx.QueryStringVectorProperty<BoxSecretsEntry>(
      _entities[2].properties[5]);
}

/// [BoxSecret] entity fields to define ObjectBox queries.
class BoxSecret_ {
  /// see [BoxSecret.id]
  static final id =
      obx.QueryIntegerProperty<BoxSecret>(_entities[3].properties[0]);

  /// see [BoxSecret.secretId]
  static final secretId =
      obx.QueryStringProperty<BoxSecret>(_entities[3].properties[1]);

  /// see [BoxSecret.userId]
  static final userId =
      obx.QueryStringProperty<BoxSecret>(_entities[3].properties[2]);

  /// see [BoxSecret.name]
  static final name =
      obx.QueryStringProperty<BoxSecret>(_entities[3].properties[3]);

  /// see [BoxSecret.dbSecretType]
  static final dbSecretType =
      obx.QueryStringProperty<BoxSecret>(_entities[3].properties[4]);

  /// see [BoxSecret.dbSecretData]
  static final dbSecretData =
      obx.QueryStringProperty<BoxSecret>(_entities[3].properties[5]);
}
